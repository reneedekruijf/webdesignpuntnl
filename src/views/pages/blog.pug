extends ../layout/layout

block prepend head
    - var page = "blog"
    - var title = "blog over alles en nog wat over bouwen voor het www"
    - var description = "Webdesignpuntnl houdt een blog bij. Hier schrijven we over alles wat met het web te maken heeft."
    - var path = "../"

block content
  section(class="section__blog")
    //- a(href="blog-english.html" title="english flag" class="blog__flag") 
      img(src="../images/flag-english.svg", alt="english flag")
    //- a(class="twitter-follow-button" href="https://twitter.com/reneedekruijf") Follow
    h2(class="h2") blog
    p(class="p") Deze blog gaat over allerhande onderwerpen die te maken hebben met development. Elk onderwerp is denkbaar.
      | Je kunt dan denken aan tools zoals 
      a(href="https://figma.com" target="_blank" rel="noopener noreferrer" class="link") Figma,
      |   
      a(href="https://www.npmjs.com" target="_blank" rel="noopener noreferrer" class="link") NPM,
      | 
      a(href="https://nodejs.org" target="_blank" rel="noopener noreferrer" class="link") Node,
      | 
      a(href="https://webpack.js.org/" target="_blank" rel="noopener noreferrer" class="link") Webpack
      |  en nog veel meer.
  aside.blog__nav
    ul.blog__nav__list
      li.blog__nav__list__item
        a(href="#linkButton" class="blog__nav__list__link") link or button
      li.blog__nav__list__item
        a(href="#tabKey" class="blog__nav__list__link") Toetsenbord - TAB
      li.blog__nav__list__item
        a(href="#digitoegankelijk" class="blog__nav__list__link") digitoegankelijk
      li.blog__nav__list__item
        a(href="#focusJs" class="blog__nav__list__link") focus with JS
      li.blog__nav__list__item
        a(href="#focus" class="blog__nav__list__link") :focus-within
      li.blog__nav__list__item
        a(href="#gitOneline" class="blog__nav__list__link") oneline
      li.blog__nav__list__item
        a(href="#cssscan" class="blog__nav__list__link") cssscan
      li.blog__nav__list__item
        a(href="#polypane" class="blog__nav__list__link") Polypane
      li.blog__nav__list__item
        a(href="#figma" class="blog__nav__list__link") Figma
  //- link or button
  article(class="article article--blog" id="linkButton")     
    div.align
      p(class="p p__left p__left--blog" )
        strong.p__firstWord Het
        | originele idee achter het internet -toen Tim Berners Lee HTML onwikkelde in 1989- was om documenten te aan elkaar te linken.
      p(class="p p__left p__left--blog" )
        | Er zijn een aantal mogelijkheden voor het gebruik van een interactief element in een website om zo naar een ander document te gaan. We kunnen een hyperlink gebruiken met de &lt;a&gt;-tag een button met de &lt;button&gt;-tag of we kunnen zelf een interactief element maken met bijvoorbeeld de &lt;div&gt;-tag. Welke kies je en waarom?
      p(class="p p__left p__left--blog" )
        | In de basis kun je zeggen dat je een link gebruikt om te linken naar een nieuwe pagina of een bepaald deel in de huidige pagina. Een button wordt gebruikt voor elke andere actie, zoals een formulier versturen of een menu openen. 
      p(class="p p__left p__left--blog" )
        | Je kunt ook zelf een button of een link maken. Je kunt tekst onderlijnen en van een &lt;div&gt; kun je met CSS gemakkelijk een button maken. Maar je bent dan wel enkele voordelen kwijt van een standaard link of button. Die kun je met Javascript wel weer toevoegen, maar waarom moeilijk doen?
      p(class="p p__left p__left--blog" )
       | Als je met een toetsenbord navigeert dan kan je met de tabtoets de focus leggen op de link en de button. De link is te activeren met de enter toets en de button met de spatiebalk. Als je een screenreader gebruikt dan kan je een overzicht van alle links opvragen. De button komt in het overzicht van de formulieren te staan. De standaard HTML tags hebben deze interactiviteit ingebakken maak je zelf een link of een button dan heb je deze voordelen dus niet.
      p(class="p p__left p__left--blog" )
       | Mensen zijn gewend aan bepaalde conventies. Je kunt op iets klikken als er een lijntje onder staat en een button ziet er uit als een button. Dus als je naar een pagina wilt linken is het slim om dit gewoon met een hyperlink te doen. De meeste ontwerpers vinden het standaard uiterlijk van een button lelijk, maar ook deze kun je gewoon met CSS aanpassen. 
      p(class="p p__left p__left--blog" )
       | Dit gaat zeker op voor mensen met die met een toetsenbord navigeren. Ze zien een button en verwachten dat er iets gaat gebeuren en dat is niet dat ze naar een andere pagina gaan. Er zal niks gebeuren als ze de enter toets gebruiken in plaats van de spatiebalk maar goed ook dit kan al verwarrend zijn.
      p(class="p p__left p__left--blog" )
       | Met andere woorden gebruik de HTML elementen waar ze voor bedoeld zijn!
       span(class="span__date") Gepubliceerd op 18 februari 2020  
       a(href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="small" data-via="reneedekruijf" data-hashtags="linkorbutton" data-show-count="false") Tweet 
  //- :toetsenbord tab-toets
  article(class="article article--blog" id="tabKey")     
    div.align
      p(class="p p__left p__left--blog" )
        strong.p__firstWord In
        | Nederland hebben ongeveer 2 miljoen mensen een beperking (bron:
        a(href="https://www.rijksoverheid.nl/onderwerpen/rechten-van-mensen-met-een-handicap/" target="_blank" rel="noopener noreferrer" class="link") rijksoverheid
        | ). Ze zijn slechtziend, blind, doof, hebben psychische problemen, een lichamelijk of verstandelijk beperking. In onze maatschappij willen en mogen we niemand uitsluiten. Iedereen moet kunnen deelnemen. Dit geld ook voor de digitale wereld. Iedereen moet van het internet, apps en software gebruik kunnen maken. Bedenk maar eens dat heel veel diensten, van bedrijven en van de overheid alleen nog maar te raadplegen zijn via het internet. We moeten er dus voor zorgen dat iedereen deze diensten kan gebruiken. Dit is voor de overheid als sinds 1 juli 2018 verplicht.
      p(class="p p__left p__left--blog" )
        | De eerste check die ik altijd doe is kijken of mijn  site te gebruiken is met slechts een toetsenbord. Dit doe je door met de TAB-toets door de site heen te lopen. Je checkt de volgende zaken. Is de volgorde van de secties op de site logisch? Dus als ik begin in de header start met het logo, kom ik dan met de volgende TAB niet in de footer terecht? Dus zorg er voor dat je met de TAB-toets elk onderdeel van de site in een logische volgorde kunt bereiken.
      p(class="p p__left p__left--blog" )
        | Dit  moet ook zichtbaar zijn. Als je met de TAB-toets door de site gaat moet er te zien zijn waar je bent. Dit staat standaard aan op interactieve elementen zoals links en buttons. Het is dat blauwe kader wat je ziet als je naar een link of button gaat met TAB. Veel designers vinden dit lelijk en halen het weg. Dit raad ik af. Je ziet immers niet meer waar je bent in de pagina als je navigeert met een toetsenbord. Je kunt de stijlen wel aanpassen met CSS. Maar zorg ten allen tijde dat het duidelijk is waar je bent op de pagina.
      p(class="p p__left p__left--blog" )
        | Elk interactieve element moet dan te activeren zijn  met enter of de spatiebalk. Als je een link maakt met href of het button element gebruikt dan werkt dit standaard zo. Deze elementen kun je dus activeren met enter of de spatiebalk. Maar bouw je zelf een button dat is deze functionaliteit er niet. Dus bedenk altijd goed welk element je voor wat gebruikt en als je zelf iets maakt dan zul je dus deze functies zelf toe moeten voegen.
        span(class="span__date") Gepubliceerd op 14 februari 2020  
        a(href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="small" data-via="reneedekruijf" data-hashtags="tabtoets" data-show-count="false") Tweet 
  //- :digitoegankelijk
  article(class="article article--blog" id="digitoegankelijk")     
    div.align
      p(class="p p__left p__left--blog" ) 
        strong.p__firstWord Toegankelijkheid
        | wil zeggen dat iedereen aan alles mag en kan meedoen. Ongacht ras, geloof en handicap. Als je in een rolstoel zit wil je ook in een restaurant naar binnen kunnen of in een bus. Dit geldt ook voor comupters en het internet. Dit noemen we digitoegankelijkheid. Voor websites van de (semi-)overheid is dit al sinds 1 juli 2018 verplicht. Websites van moeten voor iedereen toegankelijk zijn. Als dit niet zo is dan sluit je bepaalde mensen buiten. Eigenlijk moeten alle websites digitoegankelijk zijn. Op 14 juli 2016 trad het VN-verdrag voor de rechten van mensen met een beperking in werking. Om aan de eisen in dit verdrag te voldoen is de Wet gelijke behandeling op grond van handicap en chronische ziekte aangepast. De wet is nu ook van toepassing op digitaal aangeboden goederen en diensten van bedrijven en overheden. Voor meer informatie over regels en wetten kun je kijken bij 
        a(href="https://www.digitoegankelijk.nl/" target="_blank" rel="noopener noreferrer" class="link") digitoegankelijk.
        | Voor bedrijven is het ook een goed idee om te zorgen voor een toegankelijk site. Als je bepaalde groepen (lees klanten) uitsluit doordat je website niet toegankelijk is dan loop je gewoon klanten mis.
      p(class="p p__left p__left--blog")
        img(src="../images/toegankelijkheid.jpg" class="blog__image blog__image--gitTop" alt="voorbeeld van een toegankelijke site" title="voorbeeld van een toegankelijke site")        
        | Een voorbeeld van hoe een site bruikbaar kan zijn voor iedereen. De  
        a(href="https://weekvandetoegankelijkheid.nl/" target="_blank" rel="noopener noreferrer" class="link") website
        |  waar dit balkje wordt gebruikt ziet er aantrekkelijk genoeg uit voor mensen zonder handicap maar mensen met een handicap kunnen de site aanpassen door dit balkje te gebruiken. De tekstgrootte kan worden aangepast, de kleuren, het contrast en de tekst kan zelfs voor worden gelezen. Natuurlijk is het ook mogelijk om een site te maken die in het ontwerp al rekening houdt met iedereen. Voor een uitleg waar een toegankelijke site aan moet voldoen kan je een kijkje nemen bij 
        a(href="https://www.digitoegankelijk.nl/onderwerpen/themas/eenvoudige-uitleg" target="_blank" rel="noopener noreferrer" class="link") eenvoudige uitleg van de eisen.
        |  De site moet ook technisch goed in elkaar zitten. Een klein voorbeeld. Afbeeldingen op een website hebben in de HTML een alt="" atribuut. Dit stukje code gebruik je om de afbeelding te beschrijven. Iemand die slecht ziet of helemaal niet kan zien gebruikt een screenreader. De screenreader is niet in staat om de afbeelding te beschrijven maar leest het alt-atribuut voor. Het is dus heel belangrijk om deze in te vullen. Het toegankelijk maken van je site voor alle bezoekers is iets wat je niet meer kunt laten liggen.
        span(class="span__date") Gepubliceerd op 10 oktober 2019  
        a(href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="small" data-via="reneedekruijf" data-hashtags="digitoegankelijk" data-show-count="false") Tweet

  //- :focus with js
  article(class="article article--blog" id="focusJs")     
    div.align
      p(class="p p__left p__left--blog" ) 
        strong.p__firstWord focus met JS
        | Van een klant kregen we de vraag of het mogelijk is om teksten te verbergen en ze met een klik zichtbaar te maken. Dat is niet zo moeilijk. We hebben, in dit geval, de paragraaf verborgen met css en de gebruiker de mogelijkheid gegeven om de tekst weer zichtbaar te maken door op de h2 te klikken. In de afbeelding zijn dit de woorden missie, visie en uitgangspunten. Dit gebeurt allemaal in Javascript (aangezien een h2 normaal niet klikbaar is). Mocht de Javascript niet werken dan zie je gewoon alle tekst.
      p(class="p p__left p__left--blog")
        img(src="../images/focus-js-headings.png" class="blog__image blog__image--gitTop" alt="klikbare headings met focus" title="klikbare headings met focus")
        | Maar met de muis werkt dit gewoon maar niet als je met je toetsenbord navigeert. Een h2 is niet te bereiken met de tab-toets omdat dit geen interactief item is. We kunnen dit oplossen met Javascript. 
      p(class="p p__left p__left--blog")
        img(src="../images/clickhandler.png" class="blog__image blog__image--gitTop" alt="Javascript code voor een keywdown event en tabindex" title="Javascript code voor een keywdown event en tabindex")        
        | Naast de eventhandler om de h2 klikbaar te maken heb ik er ook eentje voor het toetsenbord opgezet. Keydown zorgt voor een event als er op een willekeurige toets wordt geklikt. Als er een toets wordt ingedrukt wordt de functie clickHanlder uitgevoerdt.De regel daaronder zorgt ervoor dat er een attribuut aan de h2 wordt toegevoegd zodat de h2 bereikbaar (focusable) wordt met de tab-toets.   
      p(class="p p__left p__left--blog")
        img(src="../images/keycode.png" class="blog__image blog__image--gitTop" alt="if statement voor enter of muis" title="if statement voor enter of muis")
        | In de funtie clickHandler kijken we dan eerste of de text al zichtbaar is (zo niet dan wordt deze zichtbaar en anders wordt deze weer verborgen) vervolgens wordt gekeken of de toets een enter toets is of een muisklik. In beide gevallen wordt de tekst getoont of verborgen.  
        span(class="span__date") Gepubliceerd op 04 oktober 2019  
        a(href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="small" data-via="reneedekruijf" data-hashtags="focus toevoegen met Javascript" data-show-count="false") Tweet

  //- :focus-within
  article(class="article article--blog" id="focus")     
    div.align
      p(class="p p__left p__left--blog" ) 
        strong.p__firstWord :focus-within 
        | is een ietwat vreemde css pseudo selector. Vreemd omdat je met deze selector een parent element kan selecteren gebaseerd op de staat waarin een child element zich bevind. Er zijn een paar usecases te vinden voor deze selector maar ik gebruik hem vooral om de accessibility van een dropdownmenu te verbeteren. De meeste bezoekers navigeren een site met de muis maar er zijn ook veel mensen die geen muis kunnen of willen gebruiken. Die gebruiken bijvoorbeeld een screenreader of het toetsenbord. Met de tabtoets kun je naar elk interactief element navigeren. Denk dan aan links, buttons, formulieren, velden van formulieren, dropdowns enzovoort. Maar hoe weet je waar je bent op de pagina? Dit wordt geregeld door de :focus selector, een kader om een element heen. Standaard is deze blauw en altijd aanwezig bij een interactief element.
      p(class="p p__left p__left--blog")
        img(src="../images/focus-box.jpg" class="blog__image blog__image--gitTop" alt="blauwe focus kader van een element" title="blauwe focus kader van een element")
        | Vaak wordt de focus weggehaald omdat designers het lelijk vinden. Weghalen is geen goed idee (vanwege de eerder genoemde accessibility) maar je kunt hem met :focus wel anders stijlen natuurlijk. Ook dit kan echter verwarrend zijn voor mensen die altijd met een toetsenbord navigeren.
        | Maar goed daar hebben we het nu niet over. We hebben het over :focus-within. Stel we hebben een dropdownmenu.
      p(class="p p__left p__left--blog")
        img(src="../images/focus-dropdown.jpg" class="blog__image blog__image--gitTop" alt="blauwe focus kader van een element" title="blauwe focus kader van een element")        
        | Dit is meestal een unodered list met in 1 van de listitems een tweede (hidden) unordered list. Door met de muis over het juiste listitems te hooveren wordt het submenu zichtbaar.
        | Maar hoe bereik je de items in de dropdown als je geen muis gebruikt? Dan gebruik je tab. Met tab kan je alle menu-items bereiken. Alleen kent de tab toets geen hover functie, dus met tab wordt de dropdown niet zichtbaar. Je loopt wel door alle menu-items heen maar je ziet niet wat je doet, het menu zakt niet. Met :focu-within kun je CSS schrijven waardoor het dropdownmenu wel zichtbaar wordt als je met tab de bovenste menu link selecteerd, als er focus is op de bovenste link.
        | Standaard is het dropdown verborgen met display: none. Middels de :hover pseudo selector zet je dit op display: block. Dat doe je nu dus ook met de :focus-within.   
        span(class="span__date") Gepubliceerd op 16 augustus 2019  
        a(href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="small" data-via="reneedekruijf" data-hashtags=":focus-within" data-show-count="false") Tweet
    
  //- git log --online
  article(class="article article--blog" id="gitOneline") 
    div.align
      p(class="p p__left p__left--blog" ) 
        strong.p__firstWord Git log --oneline
        | is voor mensen die veel met Git werken misschien wel heel bekend maar ik kwam er pas recent mee in aanraking toen ik via 
        a(href="https://fronteers.nl/workshops/getting-to-grips-with-git" target="_blank" rel="noopener noreferrer" class="link") Fronteers
        |  een workshop over Git volgde.
      p(class="p p__left p__left--blog")
        img(src="../images/git-log.png" class="blog__image blog__image--gitTop" alt="git log screendump" title="git log screendump")
        | Met git log kun je in terug in de tijd kijken. Je ziet bovenaan de nieuwste commit en naar onderen toe worden ze steeds ouder. Je ziet dat ze  uit twee regels bestaan. Een korte regel en daaronder een of meerdere langere regels. De eerste regel is een titel waardoor je snel kunt zien wat je precies gedaan hebt in de commit. Daaronder kan je dan met meer woorden uitleggen wat je gedaan hebt.
      p(class="p p__left p__left--blog")
        img(src="../images/git-log-oneline.png" class="blog__image blog__image--gitBottom" alt="git log --online screendump" title="git log --online screendump")
        | Het mooiste is dat je ook een log kan maken waarin je alleen de eerste regel te zien krijgt. Dit doe je door git log --oneline te gebruiken. Zo kan je snel zien wat er gebeurt is. Als nog meer informatie wilt hebben dan kijk je naar de lange logs. Als je een commit doet dan gebruik je: git commit -m "Hier een beschrijving". Dit zorgt ervoor dat je aanpassingen worden toegevoegd met een lange message. Wil je een titel en een body hebben dan gebruik je: git commit -m "titel" -m "body". Dus door twee keer -m toe te voegen kan je het bericht opdelen in een titel en een body. Ik gebruik dit nu voor al mijn  projecten en het wordt er een stuk duidelijker van.
        span(class="span__date") Gepubliceerd op 4 juni 2019  
        a(href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="small" data-via="reneedekruijf" data-hashtags="git log --oneline" data-show-count="false") Tweet
      a(href="https://git-scm.com/" target="_blank" rel="noopener noreferrer")
        img(src="../images/git-logo.png" class="tools__image tools__image--blog" alt="git logo")

    //- figma
  //-  css scan
  article(class="article article--blog" id="cssscan") 
    div.align
      p(class="p p__left p__left--blog" ) 
        strong.p__firstWord cssscan
        | is een browser extensie waarme je devtools minder snel hoeft te gebruiken om de CCS stijlen van een item op een webpagina te bekijken. 
        a(href="https://getcssscan.com/" target="_blank" rel="noopener noreferrer" class="link") Cssscan
        |  geeft je de mogelijkheid om over elk item van een pagina te hoveren, de stijlen verschijnen dan in een kader en met een klik kopieer je ze naar het klembord. Je kan de stijlen dan direct in je stijlsheet plakken en gebruiken.
      p(class="p p__left p__left--blog")
        img(src="../images/cssscan-screenshot.png" class="blog__image blog__image--cssscan" alt="css screenshot" title="Screenshot van cssscan")
        | Als je de extensie activeert dan krijg je een balkje met wat menuopties. Voor de positie van het balkje kan je kiezen uit boven- of onder in de browser. Er zijn knoppen om  
        a(href="https://getcssscan.com/" target="_blank" rel="noopener noreferrer" class="link" class="link") cssscan
        |  te pauseren of helemaal te sluiten. 
        a(href="https://getcssscan.com/" target="_blank" rel="noopener noreferrer" class="link") Cssscan
        |  is te ook te bedienen met keywboard shortcuts. Er is een knop voor feedback en er is een knop voor enkele opties. Zo kun bijvoorbeeld ook de hoverstijlen kopieren of nesten voor SASS of LESS en je kan er voor kiezen om een grid over de pagina te plaatsen.
        | Ik gebruik 
        a(href="https://getcssscan.com/" target="_blank" rel="noopener noreferrer" class="link") cssscan
        |  nu enige tijd. Als ik op een mooie site kom dan is het heel handig om even snel wat stijlen te checken. Het is nog geen gewoonte om 
        a(href="https://getcssscan.com/" target="_blank" rel="noopener noreferrer" class="link") cssscan
        |  tijdens het developen te gebruiken. Ben nog iets te veel aan de devtools gewend. Maar als je even snel wat stijlen wilt knippen en plakken dan is het zeker geweldig. 
        a(href="https://getcssscan.com/" target="_blank" rel="noopener noreferrer" class="link") Cssscan
        |  is te krijgen als extensie voor Chrome en Firefox. Safari is op dit moment in de maak.
      p(class="p p__left p__left--blog")
        a(href="https://getcssscan.com/" target="_blank" rel="noopener noreferrer" class="link") Cssscan
        |  is niet gratis. De normale prijs is &dollar; 29.99. 
        a(href="https://getcssscan.com/" target="_blank" rel="noopener noreferrer" class="link") cssscan
        |  is echter vaak in de aanbieding.
        span(class="span__date") Gepubliceerd op 24 mei 2019  
        a(href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="small" data-via="reneedekruijf" data-hashtags="cssscan" data-show-count="false") Tweet
      a(href="https://getcssscan.com/" target="_blank" rel="noopener noreferrer")
        img(src="../images/cssscan-logo.png" class="tools__image tools__image--blog" alt="cssscan logo")
  //- polypane
  article(class="article article--blog" id="polypane") 
    div.align
      p(class="p p__left p__left--blog" ) 
        strong.p__firstWord Polypane
        | is een nieuwe browser gemaakt door Kilian Valkhof. In deze browser kun je tegelijkertijd je site zien op verschillende devices en viewports.
        a(href="https://polypane.rocks/" target="_blank" rel="noopener noreferrer" class="link") Polypane
        |  is gebasseerd op Chromium. Naast de Chrome developer tools bevat de browser nog meer handig functies.
      p(class="p p__left p__left--blog")
        | Even snel een site opzoeken op je mobiel is vandaag de dag heel normaal. Sterker nog er wordt meer gesurft op draagbare apparaten dan op de desktop. Developers moeten hier rekening mee houden en ontwerpen apps en websites voor verschillende scherm formaten. Dit kan op vele manieren maar het meest gebruikelijk (op dit moment) is het gebruik van css media&dash;queries. Het ontwerp schaalt mee op de verschillende schermen. Je hebt dus een HTML bestand en via CSS kun je breekpunten bepalen waarop de CSS verandert. Op een groot scherm met snel internet laat je bijvoorbeeld een hero&dash;image zien die je kunt verbergen op kleine schermen zodat de gebruiker hier geen dure datakosten voor hoeft te betalen.
      p(class="p p__left p__left--blog")
          img(src="../images/polypane-screenshot.png" class="blog__image" alt="Polypane screenshot" title="Screenshot van Polypane")
          | In elke browser kun je zien hoe je site eruit ziet op verschillende schermen. Je moet dan de breedte van de browser aanpassen of in de devtools de responsive view inschakelen. Je kunt niet alle devices in 1 keer zien.
          a(href="https://polypane.rocks/" target="_blank" rel="noopener noreferrer" class="link") Polypane
          |  lost dit op. Je kunt meerdere formaten in 1 keer bekijken. Je kan dit doen op basis van de breekpunten in js CCS, 
          a(href="https://polypane.rocks/" target="_blank" rel="noopener noreferrer" class="link") Polypane
          |  ziet de breekpunten en maakt op basis hiervan een overzicht. Je kan er ook voor kiezen om 1 view te zien. Je kan een screenshot maken van wat er op dit moment in de viewport zichtbaar is. Wat ook heel handig is synchronised scrolling, alle views scrollen dan synchroon mee en blijven ongeveer op de dezelfde hoogte. Als je de html of de css aanpast wordt dat in alle views zichtbaar. 
          a(href="https://polypane.rocks/" target="_blank" rel="noopener noreferrer" class="link") Polypane
          |  heeft dezelfde devtools als elke Chromiumm browser, je kunt dus snel even iets aanpassen of debuggen.
      p(class="p p__left p__left--blog") 
          a(href="https://polypane.rocks/" target="_blank" rel="noopener noreferrer" class="link") Polypane
          |  is beschikbaar voor Windows, Mac en Linux. Je kan kiezen uit een paar prijsplannen en hebt de keuze voor een maand&dash; of een jaar abbonnement. Bij betaling per jaar krijg je 20% korting. Ben je lid van 
          a(href="https://fronteers.nl/inschrijven" target="_blank" rel="noopener noreferrer" class="link") Fronteers
          |  dan kun je 25% korting krijgen. Lees hier meer over de korting op de site van 
          a(href="https://fronteers.nl/blog/2019/05/25-procent-fronteers-korting-op-nieuwe-browser-polypane" target="_blank" rel="noopener noreferrer" class="link") Fronteers
          span(class="span__date") Gepubliceerd op 17 mei 2019  
          a(href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="small" data-via="reneedekruijf" data-hashtags="polypane" data-show-count="false") Tweet
      a(href="https://polypane.rocks/" target="_blank" rel="noopener noreferrer")
        img(src="../images/polypane-logo.svg" class="tools__image tools__image--blog" alt="Polypane logo")
  //- figma
  article(class="article article--blog" id="figma") 
    div.align
      p(class="p p__left p__left--blog") 
          strong.p__firstWord Figma
          | Aan het bouwen van een website (dus het programmeren van de HTML, CSS en Javascript) gaan nog wel wat dingen vooraf. Je begint altijd met een gesprek met je opdrachtgever om er precies achter ter komen wat hij of zij voor ogen heeft. Heel belangrijk is de gebruiker van de site, wie gaat hem bezoeken en wat wil je dat die bezoeker gaat vinden of zoeken. Met andere woorden wat is het doel van de site en wie is de bezoeker? 
      p(class="p p__left p__left--blog") 
          | Praten is nodig maar dit gaat altijd makkelijker als je het visueel kunt maken. We gaan dus een ontwerp maken. Het begint meestal met een schets, die wordt dan omgezet in een wireframe (zonder afbeeldingen, tekst en kleur), dan komt er een ontwerp (met afbeeldingen, tekst en kleur) en als laatste kan je nog een prototype maken. Met Figma kan dit allemaal. Omdat het in de browser werkt kan je het overal gebruiken en kan je anderen laten meewerken. Ook kan je het eindresultaat delen met anderen.
      p(class="p p__left p__left--blog")
          a(href="https://figma.com" target="_blank" rel="noopener noreferrer" class="link") Figma
          |  werkt met componenten. Je kunt een button ontwerpen en die dan omzetten in een component zodat je deze in een ander deel van je ontwerp weer gemakkelijk opnieuw kunt gebruiken. Het mooie hiervan is dat als je de mastercomponent aanpast dat alle andere meegaan. Denk bijvoorbeeld aan de kleur. Wil je een enkele instance van de button aanpassen dan kan dat ook.
      p(class="p p__left p__left--blog") 
          a(href="https://figma.com" target="_blank" rel="noopener noreferrer" class="link") Figma
          |  is voor het grootste deel gratis. Wil je gebruik maken van het werken in teams dan is er een starter en een professioneel pakket. De starter is beperkt en gratis, het professionele plan is US$ 12 per maand per editor. Ik kan je zeker aanraden eens een kijkje te nemen op de site van
          a(href="https://figma.com" target="_blank" rel="noopener noreferrer" class="link") Figma
          |  site. 
          span(class="span__date") Gepubliceerd op 9 april 2019  
          a(href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="small" data-via="reneedekruijf" data-hashtags="figma" data-show-count="false") Tweet
      a(href="https://figma.com" target="_blank" rel="noopener noreferrer")
        img(src="../images/figma-logo.svg" class="tools__image tools__image--blog" alt="figma logo")

    //-  Polypane
  
  

block script
  script(async src="https://platform.twitter.com/widgets.js" charset="utf-8")
  script(src=`${path}js/main-bundle.js`)
  script(async src="https://www.googletagmanager.com/gtag/js?id=UA-63079670-2")
  script
    | window.dataLayer = window.dataLayer || [];
    | function gtag(){dataLayer.push(arguments);}
    | gtag('js', new Date());
    | gtag('config', 'UA-63079670-2', { 'anonymize_ip': true });