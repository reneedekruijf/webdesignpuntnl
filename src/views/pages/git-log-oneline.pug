extends ../layout/layout
include ../mixins/blogNav

block prepend head
    - var page = "gitOneline"
    - var title = "git-log-oneline"
    - var description = "Door git log --oneline te gebruiken krijg je alleen de eerste regel te zien"
    - var path = "../"

block content
  +blogNav(page)
  //- git log --online
  article(class="article article--blog") 
    div.align
      h2.h2.h2--blog Git log --oneline
      p(class="p p__left p__left--blog" ) 
        strong.p__firstWord Git log --oneline
        | is voor mensen die veel met Git werken misschien wel heel bekend maar ik kwam er pas recent mee in aanraking toen ik via 
        a(href="https://fronteers.nl/workshops/getting-to-grips-with-git"   class="link") Fronteers
        |  een workshop over Git volgde.
      p(class="p p__left p__left--blog")
        img(src="../images/git-log.png" class="blog__image blog__image--gitTop" alt="git log screendump" title="git log screendump")
        | Met git log kun je in terug in de tijd kijken. Je ziet bovenaan de nieuwste commit en naar onderen toe worden ze steeds ouder. Je ziet dat ze  uit twee regels bestaan. Een korte regel en daaronder een of meerdere langere regels. De eerste regel is een titel waardoor je snel kunt zien wat je precies gedaan hebt in de commit. Daaronder kan je dan met meer woorden uitleggen wat je gedaan hebt.
      p(class="p p__left p__left--blog")
        img(src="../images/git-log-oneline.png" class="blog__image blog__image--gitBottom" alt="git log --online screendump" title="git log --online screendump")
        | Het mooiste is dat je ook een log kan maken waarin je alleen de eerste regel te zien krijgt. Dit doe je door git log --oneline te gebruiken. Zo kan je snel zien wat er gebeurt is. Als nog meer informatie wilt hebben dan kijk je naar de lange logs. Als je een commit doet dan gebruik je: git commit -m "Hier een beschrijving". Dit zorgt ervoor dat je aanpassingen worden toegevoegd met een lange message. Wil je een titel en een body hebben dan gebruik je: git commit -m "titel" -m "body". Dus door twee keer -m toe te voegen kan je het bericht opdelen in een titel en een body. Ik gebruik dit nu voor al mijn  projecten en het wordt er een stuk duidelijker van.
        span(class="span__date") Gepubliceerd op 4 juni 2019 door Renee de Kruijf 
        a(href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="small" data-via="reneedekruijf" data-hashtags="git log --oneline" data-show-count="false") Tweet
      a(href="https://git-scm.com/"  )
        img(src="../images/git-logo.png" class="tools__image tools__image--blog" alt="git logo")
block script
  script(async src="https://platform.twitter.com/widgets.js" charset="utf-8")
  script(src=`${path}js/main-bundle.js`)
  script(async src="https://www.googletagmanager.com/gtag/js?id=UA-63079670-2")
  script
    | window.dataLayer = window.dataLayer || [];
    | function gtag(){dataLayer.push(arguments);}
    | gtag('js', new Date());
    | gtag('config', 'UA-63079670-2', { 'anonymize_ip': true });